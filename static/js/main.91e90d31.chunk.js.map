{"version":3,"sources":["routes/Home.js","quries/index.js","Components/EventInfo.js","Components/User.js","Components/Invited.js","defaults/index.js","routes/Events.js","hooks/index.js","App.js","index.js"],"names":["Home","to","gql","GET_EVENT_BY_ID","EventInfo","props","event","id","host","fname","first_name","lname","last_name","name","title","location","time","time_of_event","date","date_of_event","description","returnField","Card","border","style","width","Header","Body","Title","Text","response","ATTENDING","NOT_ATTENDING","MAYBE","NO_RESPONSE","User","attendance","comment","className","onClick","cursor","Invitation","invitationList","invited","map","ListGroup","Item","guest","eventDefault","invitations","Events","eventData","match","useRouteMatch","useLocation","address","pathname","callback","data","useState","values","setValues","handleChange","persist","target","value","handleSubmit","onSubmit","preventDefault","useForm","getEvent","eventId","submitedId","useLazyQuery","variables","loading","error","path","getEventById","endsWith","type","onChange","min","max","Event","Invited","App","cache","InMemoryCache","addTypename","link","HttpLink","uri","client","ApolloClient","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.91e90d31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <Link to=\"/events\">\r\n            <h1>Events</h1>\r\n        </Link>\r\n    );\r\n};\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_ALL_PERSONS = gql`\r\n    query getAllPersons {\r\n        getAllPersons {\r\n            id\r\n            email\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_PERSON_BY_ID = gql`\r\n    query getPersonById($id: Int!) {\r\n        getPersonById(id: $id) {\r\n            email\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_PERSON_BY_EMAIL = gql`\r\n    query getPersonByEmail($email: String!) {\r\n        getPersonByEmail(email: $email) {\r\n            id\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRY_LOGIN = gql`\r\n    query getPersonByEmail($email: String!) {\r\n        getPersonByEmail(email: $email) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_EVENT_BY_ID = gql`\r\n    query getEventById($id: Int!) {\r\n        getEventById(id: $id) {\r\n            id\r\n            title\r\n            host {\r\n                id\r\n                first_name\r\n                last_name\r\n            }\r\n            description\r\n            date_of_event\r\n            time_of_event\r\n            location\r\n            invitations {\r\n                id\r\n                guest {\r\n                    id\r\n                    first_name\r\n                    last_name\r\n                }\r\n                attendance\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n//Local cashe\r\nexport const LOGGED_IN_USER = gql`\r\n    query loggedInUser {\r\n        loggedInUser @client {\r\n            id\r\n            __typename\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nconst EventInfo = (props) => {\n    const {\n        id,\n        host: { first_name: fname, last_name: lname },\n        name = `${fname} ${lname}`,\n        title,\n        location,\n        time_of_event: time,\n        date_of_event: date,\n        description,\n    } = props.event;\n    const returnField = id ? (\n        <Card border=\"light\" style={{ width: \"18rem\" }}>\n            <Card.Header> Event by {name}</Card.Header>\n            <Card.Body>\n                <Card.Title>{title}</Card.Title>\n                <Card.Text>{description}</Card.Text>\n                <Card.Text>Location: {location}</Card.Text>\n                <Card.Text>\n                    Date: {date} <br /> Time: {time}\n                </Card.Text>\n            </Card.Body>\n        </Card>\n    ) : (\n        <p>Please search for an event.</p>\n    );\n    return <>{returnField}</>;\n};\n\nexport default EventInfo;\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n// import Button from \"react-bootstrap/Button\";\nconst response = {\n    ATTENDING: \"Is attending.\",\n    NOT_ATTENDING: \"Can't attend.\",\n    MAYBE: \"Haven't decided yet.\",\n    NO_RESPONSE: \"Not responded.\",\n};\nconst User = (props) => {\n    const handleClick = (event) => {};\n    const { fname, lname, attendance, comment } = props;\n    return (\n        <div>\n            <Card>\n                <Card.Header>\n                    <div className=\"d-flex justify-content-between\">\n                        <div>\n                            {fname} {lname}\n                        </div>\n                        <i className=\"fas fa-check\"></i>\n                        <div>{response[attendance]}</div>\n                        <i\n                            onClick={handleClick}\n                            className=\"fas fa-user-edit\"\n                            style={{ cursor: \"pointer\" }}\n                        ></i>\n                    </div>\n                </Card.Header>\n                <Card.Body>\n                    <Card.Text>{comment}</Card.Text>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n};\n\nexport default User;\n","import React from \"react\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport User from \"./User\";\n\nconst Invitation = (props) => {\n    const invitationList = props.invited.map((invited) => {\n        return (\n            <ListGroup.Item>\n                <User\n                    fname={invited.guest.first_name}\n                    lname={invited.guest.last_name}\n                    attendance={invited.attendance}\n                    comment=\"WIP\"\n                />\n            </ListGroup.Item>\n        );\n    });\n    return (\n        <div>\n            <ListGroup>{invitationList}</ListGroup>\n        </div>\n    );\n};\n\nexport default Invitation;\n","export const eventDefault = {\r\n    id: null,\r\n    title: \"No title\",\r\n    host: {\r\n        id: null,\r\n        first_name: \"No\",\r\n        last_name: \"host\",\r\n    },\r\n    description: \"No description\",\r\n    date_of_event: \"No date\",\r\n    time_of_event: \"No time\",\r\n    location: \"No location\",\r\n    invitations: [],\r\n};\r\n","import React from \"react\";\r\nimport {\r\n    Switch,\r\n    Redirect,\r\n    Route,\r\n    useLocation,\r\n    useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { useLazyQuery, useQuery } from \"@apollo/react-hooks\";\r\n\r\nimport { GET_EVENT_BY_ID } from \"../quries\";\r\nimport { useForm } from \"../hooks\";\r\n\r\nimport EventInfo from \"../Components/EventInfo\";\r\nimport Invited from \"../Components/Invited\";\r\nimport { eventDefault } from \"../defaults\";\r\n\r\nexport const Events = () => {\r\n    let response = null,\r\n        eventData = eventDefault,\r\n        match = useRouteMatch();\r\n\r\n    const location = useLocation(),\r\n        address = location.pathname;\r\n\r\n    const { values, handleSubmit, handleChange } = useForm(() => getEvent(), {\r\n        eventId: \"\",\r\n        submitedId: \"\",\r\n    });\r\n\r\n    const [getEvent, { loading, error, data }] = useLazyQuery(GET_EVENT_BY_ID, {\r\n        variables: { id: values.submitedId },\r\n    });\r\n\r\n    if (loading) {\r\n        response =\r\n            location.pathname === match.path ? (\r\n                <p>Loading...</p>\r\n            ) : (\r\n                <Redirect to={match.path} />\r\n            );\r\n    }\r\n\r\n    if (error) {\r\n        response = <p>No event with this ID.</p>;\r\n    }\r\n\r\n    if (data) {\r\n        response = <Redirect to={`${match.path}/${values.submitedId}`} />;\r\n        eventData = data.getEventById;\r\n    } else if (!address.endsWith(\"events\")) {\r\n        response = <Redirect to={match.path} />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form\r\n                onSubmit={(event) => {\r\n                    handleSubmit(event, { submitedId: values.eventId });\r\n                }}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    value={values.eventId}\r\n                    onChange={handleChange}\r\n                    name=\"eventId\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                />\r\n                <input type=\"submit\" value=\"Search\" />\r\n            </form>\r\n            <div>{response}</div>\r\n            <Switch>\r\n                <Route path={`${match.path}/:eventId`}>\r\n                    <Event event={eventData} />\r\n                </Route>\r\n                <Route path={match.path}>\r\n                    <h3>Please enter an Event ID (1-10)</h3>\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Event = (props) => {\r\n    return (\r\n        <>\r\n            <EventInfo event={props.event} />\r\n            <Invited invited={props.event.invitations} />\r\n        </>\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (callback, data) => {\r\n    const [values, setValues] = useState(data);\r\n    const handleChange = (event) => {\r\n        event.persist();\r\n        setValues((values) => ({\r\n            ...values,\r\n            [event.target.name]: event.target.value,\r\n        }));\r\n    };\r\n    const handleSubmit = (event, onSubmit) => {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        if (onSubmit) {\r\n            setValues((values) => ({\r\n                ...values,\r\n                ...onSubmit,\r\n            }));\r\n        }\r\n        callback(values);\r\n    };\r\n    return {\r\n        values,\r\n        handleChange,\r\n        handleSubmit,\r\n    };\r\n};\r\n","import \"./Components/Style/App.css\";\r\n\r\nimport React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Home, Events } from \"./routes\";\r\n\r\n// const response = {\r\n//     ATTENDING: \" is attending.\",\r\n//     NOT_ATTENDING: \" is not attending.\",\r\n//     MAYBE: \" isn't sure yet.\",\r\n//     NO_RESPONSE: \" haven't responded yet.\",\r\n// };\r\n\r\nconst App = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={`/events`}>\r\n                <Events />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Home />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n//     <>\r\n//     <h1>{data.getEventById.title}</h1>\r\n//     <div>{data.getEventById.description}</div>\r\n//     <div>{data.getEventById.time_of_event}</div>\r\n//     <div>{data.getEventById.date_of_event}</div>\r\n//     <ul>\r\n//         {data.getEventById.invitations.map((invitation) => {\r\n//             return (\r\n//                 <li>\r\n//                     <>{`Guest with ID ${invitation.guest.id} ${\r\n//                         response[invitation.attendance]\r\n//                     }`}</>\r\n//                 </li>\r\n//             );\r\n//         })}\r\n//     </ul>\r\n// </>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nconst cache = new InMemoryCache({ addTypename: false });\r\nconst link = new HttpLink({\r\n    //headers: { authorization: localStorage.getItem(\"id\") },\r\n    uri: \"https://signup5.herokuapp.com/graphql/\",\r\n});\r\nconst client = new ApolloClient({\r\n    cache,\r\n    link,\r\n    // typeDefs,\r\n    // resolvers,\r\n});\r\n\r\n// cache.writeData({\r\n\r\n// });\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </ApolloProvider>,\r\n    document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}