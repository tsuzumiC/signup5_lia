{"version":3,"sources":["gql/queries.js","Components/EventInfo.js","Components/User.js","Components/Invited.js","gql/mutators.js","Components/Inputs.js","Components/Attendance.js","Components/Events.js","Components/Home.js","App.js","index.js"],"names":["gql","GET_EVENT_BY_ID","EventInfo","props","event","id","host","fname","first_name","lname","last_name","name","title","location","time","time_of_event","date","date_of_event","description","className","style","fontWeight","response","ATTENDING","NOT_ATTENDING","MAYBE","NO_RESPONSE","User","useState","commentVisibility","state","setState","attendance","comment","inviteId","useLocation","history","useHistory","onClick","stopPropagation","push","pathname","cursor","Invited","invitationList","invited","map","invite","key","guest","UPDATE_INVITATION","Submit","type","value","cssButton","Button","Radio","htmlFor","labelText","onChange","checked","compare","Field","cssContainer","cssLabel","isActive","cssField","onMouseOver","onActive","onMouseLeave","onFocus","onBlur","Attendance","eventId","values","setValues","handleChange","persist","target","mutation","updateInvitation","data","onSubmit","preventDefault","variables","invitationUpdateInput","Events","eventData","address","match","useRouteMatch","eventMatch","RegExp","inviteMatch","storedEvent","useLazyQuery","getEvent","loading","error","getEventById","test","to","path","min","max","Event","regEx","invitations","find","slice","lastIndexOf","Home","App","cache","InMemoryCache","addTypename","link","HttpLink","uri","client","ApolloClient","writeData","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.735b5e86.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_USERS = gql`\r\n    query getUsers {\r\n        getUsers {\r\n            id\r\n            email\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_USER_BY_ID = gql`\r\n    query getUserById($id: Int!) {\r\n        getUserById(id: $id) {\r\n            email\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_PERSON_BY_EMAIL = gql`\r\n    query getPersonByEmail($email: String!) {\r\n        getPersonByEmail(email: $email) {\r\n            id\r\n            first_name\r\n            last_name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRY_LOGIN = gql`\r\n    query getPersonByEmail($email: String!) {\r\n        getPersonByEmail(email: $email) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_EVENT_BY_ID = gql`\r\n    query getEventById($id: Int!) {\r\n        getEventById(id: $id) {\r\n            id\r\n            title\r\n            host {\r\n                id\r\n                first_name\r\n                last_name\r\n            }\r\n            description\r\n            date_of_event\r\n            time_of_event\r\n            location\r\n            invitations {\r\n                id\r\n                guest {\r\n                    id\r\n                    first_name\r\n                    last_name\r\n                }\r\n                event {\r\n                    id\r\n                }\r\n                attendance\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n//Local cashe\r\nexport const LOGGED_IN_USER = gql`\r\n    query loggedInUser {\r\n        loggedInUser @client {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const GET_STORED_EVENT = gql`\r\n    query getStoredEvent {\r\n        storedEvent @client {\r\n            id\r\n            title\r\n            host {\r\n                id\r\n                first_name\r\n                last_name\r\n            }\r\n            description\r\n            date_of_event\r\n            time_of_event\r\n            location\r\n            invitations {\r\n                id\r\n                guest {\r\n                    id\r\n                    first_name\r\n                    last_name\r\n                }\r\n                event_id\r\n                attendance\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\n\r\nconst EventInfo = (props) => {\r\n    const {\r\n        id,\r\n        host: { first_name: fname, last_name: lname },\r\n        name = `${fname} ${lname}`,\r\n        title,\r\n        location,\r\n        time_of_event: time,\r\n        date_of_event: date,\r\n        description,\r\n    } = props.event;\r\n\r\n    return (\r\n        <div className=\"card text-center\">\r\n            <div style={{ fontWeight: \"bold\" }} className=\"card-header \">\r\n                {\" \"}\r\n                Event by {name}\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <div className=\"card-title\">{title}</div>\r\n                <div className=\"card-text\">{description}</div>\r\n                <div className=\"card-text\">Location: {location}</div>\r\n                <div className=\"card-text\">\r\n                    Date: {date} <br /> Time: {time}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventInfo;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n\r\nconst response = {\r\n    ATTENDING: \"Is attending.\",\r\n    NOT_ATTENDING: \"Can't attend.\",\r\n    MAYBE: \"Haven't decided yet.\",\r\n    NO_RESPONSE: \"Not responded.\",\r\n};\r\nconst User = (props) => {\r\n    const [state, setState] = useState({ commentVisibility: false });\r\n    const { fname, lname, attendance, comment, inviteId } = props;\r\n    const location = useLocation(),\r\n        history = useHistory();\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"card\">\r\n                <div\r\n                    className=\"card-header\"\r\n                    onClick={() => {\r\n                        return comment\r\n                            ? setState({\r\n                                  commentVisibility: !state.commentVisibility,\r\n                              })\r\n                            : null;\r\n                    }}\r\n                >\r\n                    <div className=\"d-flex justify-content-between\">\r\n                        <div>\r\n                            {fname} {lname}\r\n                        </div>\r\n                        <i className=\"fas fa-check\"></i>\r\n                        <div>{response[attendance]}</div>\r\n                        <i\r\n                            onClick={(event) => {\r\n                                event.stopPropagation();\r\n                                history.push(\r\n                                    `${location.pathname}/${inviteId}`\r\n                                );\r\n                            }}\r\n                            className=\"fas fa-user-edit\"\r\n                            style={{ cursor: \"pointer\" }}\r\n                        ></i>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    {state.commentVisibility ? (\r\n                        <div className=\"card-body\">\r\n                            <div className=\"card-text\">{comment}</div>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\n\r\nimport User from \"./User\";\r\n\r\nconst Invited = (props) => {\r\n    const invitationList = props.invited.map((invite) => {\r\n        return (\r\n            <li\r\n                key={invite.id}\r\n                className=\"list-group-item list-group-item-warning\"\r\n            >\r\n                <User\r\n                    fname={invite.guest.first_name}\r\n                    lname={invite.guest.last_name}\r\n                    attendance={invite.attendance}\r\n                    comment={invite.comment}\r\n                    inviteId={invite.id}\r\n                />\r\n            </li>\r\n        );\r\n    });\r\n    return <ul className=\"list-group\">{invitationList}</ul>;\r\n};\r\n\r\nexport default Invited;\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const UPDATE_INVITATION = gql`\r\n    mutation updateInvitation($invitationUpdateInput: InvitationUpdateInput) {\r\n        updateInvitation(invitationUpdateInput: $invitationUpdateInput) {\r\n            id\r\n            message\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STORE_EVENT = gql`\r\n    mutation StoreEvent($event: Event) {\r\n        storeEvent(event: $event) @client\r\n    }\r\n`;\r\n","import \"./Style/Input.css\";\r\n\r\nimport React from \"react\";\r\n\r\nexport const Submit = (props) => {\r\n    return (\r\n        <input\r\n            type=\"submit\"\r\n            key={props.key ? props.key : props.id}\r\n            name={props.name ? props.name : props.id}\r\n            id={props.id}\r\n            value={props.value}\r\n            className={`${props.cssButton} button`}\r\n        />\r\n    );\r\n};\r\n\r\nexport const Button = (props) => {\r\n    return (\r\n        <input\r\n            type=\"button\"\r\n            key={props.key ? props.key : props.id}\r\n            name={props.name ? props.name : props.id}\r\n            id={props.id}\r\n            value={props.value}\r\n            onClick={props.onClick}\r\n            className={`${props.cssButton} button`}\r\n        />\r\n    );\r\n};\r\n\r\nexport const Radio = (props) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={props.id}>{props.labelText}</label>\r\n            <input\r\n                type=\"radio\"\r\n                key={props.key ? props.key : props.id}\r\n                id={props.id}\r\n                name={props.name ? props.name : props.id}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                checked={props.compare === props.value}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const Field = (props) => {\r\n    return (\r\n        <div className={`${props.cssContainer} container`}>\r\n            <label\r\n                className={`${props.cssLabel} label ${\r\n                    props.value ? \"active\" : props.isActive\r\n                }`}\r\n                htmlFor={props.id}\r\n            >\r\n                {props.labelText}\r\n            </label>\r\n            <input\r\n                className={`${props.cssField} field ${props.isActive}`}\r\n                key={props.key ? props.key : props.id}\r\n                id={props.id}\r\n                name={props.name ? props.name : props.id}\r\n                type={props.type}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                onMouseOver={props.onActive}\r\n                onMouseLeave={props.onActive}\r\n                onFocus={props.onActive}\r\n                onBlur={props.onActive}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\nimport { Mutation } from \"@apollo/react-components\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { UPDATE_INVITATION } from \"../gql/mutators\";\nimport { Radio, Field, Submit, Button } from \"./Inputs\";\n\nconst Attendance = (props) => {\n    const {\n        id: inviteId,\n        guest: { id: guestId, first_name, last_name },\n        event: { id: eventId },\n        attendance,\n        comment,\n    } = props.invite;\n    const history = useHistory();\n    const [values, setValues] = useState({\n        attendance: attendance,\n        comment: comment,\n    });\n    const handleChange = (event) => {\n        event.persist();\n        setValues((values) => ({\n            ...values,\n            [event.target.name]: event.target.value,\n        }));\n    };\n\n    return (\n        <Mutation mutation={UPDATE_INVITATION}>\n            {(updateInvitation, { data }) => (\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n                        updateInvitation({\n                            variables: {\n                                invitationUpdateInput: {\n                                    id: inviteId,\n                                    comment: values.comment,\n                                    attendance: values.attendance,\n                                },\n                            },\n                        });\n                    }}\n                >\n                    <Radio\n                        id=\"attending\"\n                        name=\"attendance\"\n                        value=\"ATTENDING\"\n                        labelText=\"Attending\"\n                        onChange={handleChange}\n                        compare={values.attendance}\n                    />\n                    <Radio\n                        id=\"not_attending\"\n                        name=\"attendance\"\n                        value=\"NOT_ATTENDING\"\n                        labelText=\"Can't Attend\"\n                        onChange={handleChange}\n                        compare={values.attendance}\n                    />\n                    <Radio\n                        id=\"maybe\"\n                        name=\"attendance\"\n                        value=\"MAYBE\"\n                        labelText=\"Maybe\"\n                        onChange={handleChange}\n                        compare={values.attendance}\n                    />\n                    <Field\n                        type=\"text\"\n                        id=\"comment\"\n                        value={values.comment}\n                        onChange={handleChange}\n                        labelText=\"Comments\"\n                    />\n                    <Submit id=\"submit\" value=\"Save\" />\n                    <Button\n                        id=\"back\"\n                        value=\"Back\"\n                        onClick={() => history.push(`/events/${eventId}`)}\n                    />\n                </form>\n            )}\n        </Mutation>\n    );\n};\nexport default Attendance;\n","import React, { useState } from \"react\";\r\nimport {\r\n    Switch,\r\n    Redirect,\r\n    Route,\r\n    useLocation,\r\n    useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\n\r\nimport { GET_EVENT_BY_ID } from \"../gql/queries\";\r\n\r\nimport EventInfo from \"./EventInfo\";\r\nimport Invited from \"./Invited\";\r\nimport Attendance from \"./Attendance\";\r\n\r\nexport const Events = () => {\r\n    let response = null,\r\n        eventData = null;\r\n\r\n    const location = useLocation(),\r\n        address = location.pathname,\r\n        match = useRouteMatch(),\r\n        eventMatch = new RegExp(\"^/events/[0-9]+/*$\"),\r\n        inviteMatch = new RegExp(\"^/events/[0-9]+/[0-9]+/*$\");\r\n\r\n    const [values, setValues] = useState({\r\n        eventId: \"\",\r\n        storedEvent: null,\r\n    });\r\n    const [getEvent, { loading, error, data }] = useLazyQuery(GET_EVENT_BY_ID);\r\n\r\n    const handleChange = (event) => {\r\n            event.persist();\r\n            setValues((values) => ({\r\n                ...values,\r\n                [event.target.name]: event.target.value,\r\n            }));\r\n        },\r\n        handleSubmit = (event) => {\r\n            event.preventDefault();\r\n            if (\r\n                !values.storedEvent ||\r\n                values.storedEvent.id !== values.eventId\r\n            ) {\r\n                getEvent({ variables: { id: values.eventId } });\r\n            }\r\n        };\r\n\r\n    if (loading) {\r\n        response = <p>Loading...</p>;\r\n    }\r\n\r\n    if (error) {\r\n        response = <p>No event with this ID.</p>;\r\n    }\r\n\r\n    if (data) {\r\n        eventData = data.getEventById;\r\n        if (!values.storedEvent || eventData.id !== values.storedEvent.id) {\r\n            setValues((values) => ({\r\n                ...values,\r\n                storedEvent: eventData,\r\n            }));\r\n        }\r\n    } else if (!values.storedEvent && !loading && !error) {\r\n        if (eventMatch.test(address)) {\r\n            getEvent({ variables: { id: address.match(/[0-9]+/)[0] } });\r\n        } else if (inviteMatch.test(address)) {\r\n            getEvent({ variables: { id: address.match(/[0-9]+/)[0] } });\r\n        }\r\n    }\r\n\r\n    if (values.storedEvent) {\r\n        if (!inviteMatch.test(address)) {\r\n            response = (\r\n                <Redirect to={`${match.path}/${values.storedEvent.id}`} />\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"number\"\r\n                    value={values.eventId}\r\n                    onChange={handleChange}\r\n                    name=\"eventId\"\r\n                    min=\"1\"\r\n                    max=\"10\"\r\n                />\r\n                <input type=\"submit\" value=\"Search\" />\r\n            </form>\r\n            <div>{response}</div>\r\n            <Switch>\r\n                <Route path={`${match.path}/:eventId`}>\r\n                    {values.storedEvent ? (\r\n                        <Event event={values.storedEvent} />\r\n                    ) : null}\r\n                </Route>\r\n                <Route path={match.path}>\r\n                    {loading ? null : <h3>Please enter an Event ID (1-10)</h3>}\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Event = (props) => {\r\n    const match = useRouteMatch(),\r\n        location = useLocation().pathname,\r\n        regEx = new RegExp(\"events/[0-9]+/[0-9]+\");\r\n    return (\r\n        <>\r\n            <EventInfo event={props.event} />\r\n            <Switch>\r\n                <Route path={`${match.path}/:inviteId`}>\r\n                    {regEx.test(location) ? (\r\n                        <Attendance\r\n                            invite={props.event.invitations.find((invite) => {\r\n                                return (\r\n                                    invite.id ===\r\n                                    location.slice(\r\n                                        location.lastIndexOf(\"/\") + 1\r\n                                    )\r\n                                );\r\n                            })}\r\n                        />\r\n                    ) : (\r\n                        <div>Loading</div>\r\n                    )}\r\n                </Route>\r\n                <Route path={match.path}>\r\n                    <Invited invited={props.event.invitations} />\r\n                </Route>\r\n            </Switch>\r\n        </>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <>\r\n            <Link to=\"/events\">\r\n                <h1>Events</h1>\r\n            </Link>\r\n        </>\r\n    );\r\n};\r\n","import \"./Components/Style/App.css\";\r\n\r\nimport React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport { Home, Events } from \"./routes\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={`/events`}>\r\n                <Events />\r\n            </Route>\r\n            <Route path=\"/\">\r\n                <Home />\r\n            </Route>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\n// import { typeDefs, resolvers } from \"./gql/resolvers\";\r\nimport App from \"./App\";\r\n\r\nconst cache = new InMemoryCache({ addTypename: false });\r\nconst link = new HttpLink({\r\n    //headers: { authorization: localStorage.getItem(\"id\") },\r\n    uri: \"https://signup5lia.herokuapp.com/graphql/\",\r\n});\r\nconst client = new ApolloClient({\r\n    cache,\r\n    link,\r\n    /* typeDefs,\r\n    resolvers, */\r\n});\r\n\r\ncache.writeData({\r\n    data: {\r\n        storedEvent: null,\r\n    },\r\n});\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </ApolloProvider>,\r\n    document.querySelector(\"#root\")\r\n);\r\n"],"sourceRoot":""}